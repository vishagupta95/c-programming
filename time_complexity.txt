Time complexity of an algorithm signifies the total time required by the it to run till its completion.
The time complexity of algorithms is expressed using the big O notation. (asymptotic notation )

example
1)If there are 2 loops, Outer loops is incrementing sequentially,  and inner loop is incrementing by 
multiplication of 2 , then complexity of  double for loop is  n log n.
2)O(1) is better than linear time O(n) because the former is not depending on the  input-size of the 
problem.
3)Binary Search is great to search through large, sorted arrays. It has a time complexity of  O(log n) 
4)0(1) is a time complexity of function returning n multiply n
5) Average and worst case complexity of quicksort merge  sort and heap sort is n  multiply log n.
6) priority queue has time complexity of 0(1) for top , and log n for push and pop.Operation space 
complexity is  aways 1 (constant)
7) vector, deque has time complexity of log N due to sorted arrays unordered_map/unorder set has
 complexity of 0(1)
8) many recursive functions has complexity 0(n) also note that 0(n divide by 5) is same as 0(n)

The space Complexity of an algorithm is the total space taken by the algorithm with respect to the
input size. Space complexity includes both Auxiliary space and space used by input.
Merge Sort uses O(n) auxiliary space, Insertion sort, and Heap Sort use O(1) auxiliary space. 

Itâ€™s necessary to mention that space complexity depends on a variety of things such as the 
programming language, the compiler, or even the machine running the algorithm.

 


