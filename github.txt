Git is a distributed version control system(VCS) that enables where the
complete codebase — including its full version history — is mirrored on every
developer's computer.

Git has three main states that your files can reside in: modified, staged, and committed:

SVN :SVN is a Centralized Version Control system. Meaning you only have a centralized copy and you modify it by means of 
“checkout” and “commit”.You don’t get entire repo on your local workstation. You have to checkout each branch desperately. 
Further, you cannot create local branches. You can only modify the checked out branch and commit it to server.
All commits in SVN are in sequence.


Git :Git is Decentralized Version Control system. Unlike SVN, you “clone” entire repo on your workstation.
You “add”, “commit” and “push” to more than one “remote” repository.
You can create local branches and entire repository is cloned. You don’t need to connect to remote repo for “commit”. You can “push” several 
commits in one go to any of the remote repository.
GitHub is a web based repository hosting service, which provides support for Git-based version control repos.


The Git directory is where Git stores the metadata and object database for your project. This is
The most important part of Git, and it is what is copied when you clone a repository from another
computer.

Git Large File Storage (LFS) replaces large files such as audio samples, videos,
datasets, and graphics with text pointers inside Git, while storing the file contents on a
remote server like GitHub.com or GitHub Enterprise.

In Git, "origin" is a shorthand name for the remote repository that a project was originally cloned
from. More precisely, it is used instead of that original repository's URL - and thereby makes
referencing much easier.

-------------------------------------------------------------------------------------------------------
Repo - The Multiple Git Repository Tool,repo is a python wrapper script for git


repo init command initializes repo in the current directory. That's, it downloads the latest repo source and a manifest.xml file that describes 
the directory structure of the git repositories, and store all of these in .repo sub-directory in the current directory. In your case, 
you have used an optional -b argument which is used to select the branch to checkout. By default (i.e., when -b argument is not used), master branch is used.

repo sync updates working tree to the latest revision. That's, it synchronizes local project directories with the remote repositories specified in the manifest file. 
If a local project does not yet exist, it will clone a new local directory from the remote repository and set up tracking branches as specified in the manifest. 
If the local project already exists, it will update the remote branches and rebase any new local changes on top of the new remote changes. -j arg

example

repo init -u git@gitlab-sjc.abc.com:nx-linux-dev/manifest.git -b 1.6.1
repo sync
cd distro/meta-nx-linux/
git checkout 1.6.1
git checkout -b feature
git apply --reject --whitespace=fix ~/vimp.txt
git add .
git commit -m "CSCwd04809 fixed"
git push origin feature


-------------------------------------------------------------------------------------------------------
git fetch origin

git fetch really only downloads new data from a remote repository 
Due to it's "harmless" nature, you can rest assured: fetch will never manipulate, destroy, or screw up anything. This means you can never fetch often enough.

git pull origin master
git pull, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. This means that pull not only downloads new data; it also directly integrates it into your current working copy files. This has a couple of consequences:


example

/router/bin/wit space create -branch main -snapshot COV_10_3_1_IMG9_0_183 -space try_3
git fetch origin CSCwd24405.main.kirkstone_v1
git checkout -b dev/kirkstone_foss_v1 origin/CSCwd24405.main.kirkstone_v1    
git branch
* dev/kirkstone_foss_v1
main


-------------------------------------------------------------------------------------------------------

example


 cd distro/meta-nx-linux/
 git branch
 git checkout master
 git pull
 git branch
 git checkout inclusive_translation
 git branch
 git rebase master
 git stash
 git rebase master
 git stash pop
------------------------------------

Rebasing v/s Merging

he only differences between a rebase and a merge are:

The resulting tree structure of the history (generally only noticeable when looking at a commit graph) is different (one will have branches, the other won't).
Merge will generally create an extra commit (e.g. node in the tree).
Merge and rebase will handle conflicts differently. Rebase will present conflicts one commit at a time where merge will present them all at once.
So the short answer is to pick rebase or merge based on what you want your history to look like.

Now, let’s say that the new commits in main are relevant to the feature that you’re working on. To incorporate the new commits into your feature branch, you have two options: merging or rebasing.

The Merge Option
The easiest option is to merge the main branch into the feature branch using something like the following:

git checkout feature
git merge main

Or, you can condense this to a one-liner:
git merge feature main

this moves the entire feature branch to begin on the tip of the main branch, effectively incorporating all of the new commits in main.
 But, instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch.

git checkout feature
git rebase main


------------------------------------------------------------------------------------
Git log is a utility tool to review and read a history of everything that happens
to a repository


git fetch <remote>
git pull=git fetch + merge.


Git Aliases
git config --global alias.co checkout


ignoring files

$ cat .gitignore
*.[oa]
*~

--Check out a repository from GitHub
git clone https://gh-nx.scm.engit.abc.com/nx/nx.git  


Basic

1.      git --version
2.      cat ~/.gitconfig
3.      git config –list
4.      git diff --staged same git diff --cached
5.      git help
6.      git help config
7.      git add -h
8.      git status -s
9.      git log
10.     git log -p -2
11.     git checkout -- <file> is a dangerous command revert
12.     git restore --staged CONTRIBUTING.md
13.     git diff --cached to see what you’ve staged so far (--staged and --cached are synonyms):
14.     git rm
15.     git mv
16.     git stash
17.     git branch -r
18.     git log –oneline
19.     git log --pretty=format:"%h - %an, %ar : %s"
20.     git log --oneline --decorate
21.     git commit -m 'Initial project version'
22.     git revert fd73451 // undo
23.     git revert HEAD // redo (important)
24.     git apply --reject --whitespace=fix ~/vimp.txt



Git branch
1.      git branch feature
2.      git branch
3.      git checkout feature (now in feature)
4.      git branch -D feature // unsafe
5.      git checkout -b CSCwc02075.main.vbe_updated_for_nx_linux

 

Git merge

1.      git checkout master - > Switched to branch 'master'
2.      git merge feature -- > merge
3.      git branch -d feature // safe ,taken care of unmerge changes



Git stash
Stashing takes the dirty state of your working directory — that is, your modified
tracked files and staged changes — and saves it on a stack of unfinished changes that you can
reapply at any time



git stash : Stash the changes in a dirty working directory away .
git checkout some_branch (change to intended branch -)
git stash list (list stashes)
git stash apply (to apply stash to working tree in current branch)
git stash apply stash@{12} (if you will have many stashes you can choose what stash will apply -- in this case we apply stash 12)
git stash drop stash@{0} (to remove from stash list -- in this case stash 0)
git stash pop stash@{1} (to apply selected stash and drop it from stash list)

git apply --reject --whitespace=fix ~/vimp.txt

misc

git cherry-pick  < hash id>
git reset --hard
git revert adbd940 #git revert can be used to undo any commit — not just the most recent




git diff --name-only --cached
git reset <file> or git reset to unstage all changes.Jan 13, 2020
--------------Creating a local git repository
git init
Add these so that Git knows they are to be tracked
git add filename
git commit -m "message"
git push -u origin <local branch> 


Note :git push <remote> <branch>.

The above command will first execute git fetch first. Then it will execute the git merge command in
the working directory. It means that, if you are in the master branch then the remote changes in
master will be merged to the local master branch.



--------------Looking at differences
git diff
git diff commitid
git diff commitid1 commitid2
git diff branchname



Create a new branch named feature and switch to it using:
git checkout -b feature

Switch back to the ‘master’ branch:
git checkout master

-------------- Merge the branch into the main version:
git checkout master
git merge feature
git push

Delete the feature branch
git branch -d feature
git push origin -delete feature

Once you have done that you should just be able to do git pull and git push.

Undo an uncommitted change to one file:
git checkout -- filename

Undo all uncommitted changes:
git reset --hard

Undo a commit:
git revert commitid

Obtain an older version of a specific file:
git checkout commitid -- filename

Create a tag for your current code (e.g. a version number)
git tag -a v1.4 -m "my version 1.4"
git push --tags

git shortlog oldtaglabel..HEAD
(where oldtaglabel is a tag or commit identifier of an earlier version).


your remote repository you will use the shortname 'origin'.

git remote -v
  git remote show origin



Summarizing your changes
between two particular commits:
git shortlog commitid1..commitid2

